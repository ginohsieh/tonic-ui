(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6651],{37213:function(e,n,o){"use strict";o.r(n),o.d(n,{default:function(){return MDXContent}}),o(2784);var t=o(30876),r=["components"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var o=arguments[n];for(var t in o)Object.prototype.hasOwnProperty.call(o,t)&&(e[t]=o[t])}return e}).apply(this,arguments)}var l={};function MDXContent(e){var n=e.components,o=function(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],!(n.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}(e,r);return(0,t.kt)("wrapper",_extends({},l,o,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",null,"Getting Started"),(0,t.kt)("p",null,"Install Tonic UI and its peer dependencies."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @trendmicro/react-styled-ui\n")),(0,t.kt)("p",null,"Optionally, yoiu can create a theme object and pass it to the ",(0,t.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," component."),(0,t.kt)("p",null,"This step is not required if you are using the default theme."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"// example base.js\nexport default {\n  fonts: {\n    base: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n    mono: '\"SFMono-Medium\", \"SF Mono\", \"Segoe UI Mono\", Menlo, Consolas, Courier, monospace',\n  };\n  fontSizes: {\n    xs: '.75rem',\n    sm: '.875rem',\n    md: '1rem',\n    lg: '1.125rem',\n    xl: '1.25rem',\n    '2xl': '1.5rem',\n    '3xl': '1.75rem',\n    '4xl': '2rem',\n  },\n};\n")),(0,t.kt)("p",null,"You can extend the theme object to add custom styles, including colors, fonts, and more."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'import { theme } from \'@trendmicro/react-styled-ui\';\n\n// Let\'s say you want to add custom colors\nconst customTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    brand: {\n      90: "#1a365d",\n      80: "#153e75",\n      70: "#2a69ac",\n    },\n  },\n};\n')),(0,t.kt)("p",null,"Add the theme to your application with the ",(0,t.kt)("inlineCode",{parentName:"p"},"ThemeProvider"),", passing in the theme\nobject as a prop."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { render } from 'react-dom';\nimport { ThemeProvider } from '@trendmicro/react-styled-ui';\n\nrender(\n  <ThemeProvider theme={customTheme}>\n    {children}\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n")),(0,t.kt)("h2",null,"Using components"),(0,t.kt)("p",null,"Import components using named imports from ",(0,t.kt)("inlineCode",{parentName:"p"},"@trendmicro/react-styled-ui"),", as shown below:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"import { Button } from '@trendmicro/react-styled-ui';\n")),(0,t.kt)("h2",null,"Recommended setup"),(0,t.kt)("p",null,"Sometimes you may need to apply base CSS styles to your application. Tonic UI exports a ",(0,t.kt)("inlineCode",{parentName:"p"},"CSSBaseline")," that is used to normalize styles for a wide range of elements, which is based on the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/necolas/normalize.css"},"normalize.css"),"."),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"CSSBaseline")," is recommended to add at the root to ensure all components work correctly."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"import { Global, css } from '@emotion/react';\nimport {\n  Box,\n  ColorModeProvider,\n  ColorStyleProvider,\n  CSSBaseline,\n  ThemeProvider,\n  ToastProvider,\n  useColorMode,\n  useTheme,\n} from '@trendmicro/react-styled-ui';\n\nimport App from './App';\n\nconst Layout = (props) => {\n  const [colorMode] = useColorMode(); // One of: 'dark', 'light'\n  const [colorStyle] = useColorStyle({ colorMode });\n  const { fontSizes, lineHeights } = useTheme();\n  const backgroundColor = colorStyle.background.primary;\n  const color = colorStyle.text.primary;\n\n  return (\n    <>\n      <Global\n        styles={css`\n          :root {\n            color-scheme: ${colorMode};\n          }\n          body {\n            font-size: ${fontSizes.sm};\n            line-height: ${lineHeights.sm};\n          }\n        `}\n      />\n      <Box\n        backgroundColor={backgroundColor}\n        color={color}\n        fontSize=\"sm\"\n        lineHeight=\"sm\"\n        height=\"100vh\"\n        {...props}\n      />\n    </>\n  );\n};\n\nconst CustomApp = (props) => {\n  return (\n    <ThemeProvider>\n      <ColorModeProvider value=\"dark\">\n        <ColorStyleProvider>\n          <ToastProvider>\n            <CSSBaseline />\n            <Layout>\n              <App {...props} />\n            </Layout>\n          </ToastProvider>\n        </ColorStyleProvider>\n      </ColorModeProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default CustomApp;\n")))}MDXContent.isMDXComponent=!0},73375:function(e,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started",function(){return o(37213)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=73375)}),_N_E=e.O()}]);