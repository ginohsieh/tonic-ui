(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7385],{18955:function(e,r,o){"use strict";o.r(r),o.d(r,{default:function(){return MDXContent}}),o(2784);var n=o(30876);o(58693);var t=o(90925),l=["components"];function _extends(){return(_extends=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e}).apply(this,arguments)}var d={};function MDXContent(e){var r=e.components,o=function(e,r){if(null==e)return{};var o,n,t=function(e,r){if(null==e)return{};var o,n,t={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],r.indexOf(o)>=0||(t[o]=e[o]);return t}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],!(r.indexOf(o)>=0)&&Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}(e,l);return(0,n.kt)("wrapper",_extends({},d,o,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",null,"Borders"),(0,n.kt)(t.Z,{theme:"borders",mdxType:"ThemeParser"}),(0,n.kt)("h2",null,"Border"),(0,n.kt)("p",null,"The border shorthand property sets all the border properties in one declaration."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'/* style */\nborder="solid"\n\n/* width | style */\nborder="2px dotted"\n\n/* style | color */\nborder="outset #f33"\n\n/* width | style | color */\nborder="medium dashed green"\n\n/* Global values */\nborder="inherit"\nborder="initial"\nborder="unset"\n')),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"border")," property may be specified using one, two, or three of the values listed below. The order of the value does not matter. See ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border"},"border")," in MDN for more details."),(0,n.kt)("p",null,"Note: The border will be invisible if its style is not defined. This is because the style defaults to ",(0,n.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,n.kt)("h3",null,"Values"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"<border-color>"),"\nSets the color of the border. Defaults to ",(0,n.kt)("inlineCode",{parentName:"p"},"currentcolor")," if absent."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"<border-style>"),"\nSets the style of the border. Defaults to ",(0,n.kt)("inlineCode",{parentName:"p"},"none")," if absent."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"<border-width>"),"\nSets the thickness of the border. Defaults to ",(0,n.kt)("inlineCode",{parentName:"p"},"medium")," if absent."),(0,n.kt)("h3",null,"Nonnegative length"),(0,n.kt)("p",null,"If the border is a numeric value defined in the theme, the ",(0,n.kt)("inlineCode",{parentName:"p"},"solid")," border style will be applied as a shorthand for the ",(0,n.kt)("inlineCode",{parentName:"p"},"borderWidth")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"borderStyle")," properties."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const backgroundColor = {\n    dark: \'gray:90\',\n    light: \'gray:10\',\n  }[colorMode];\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="flex-start"\n      justifyContent="center"\n      flexDirection="column"\n      backgroundColor={backgroundColor}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const theme = useTheme();\n  const borderColor = \'gray:50\';\n  const borderWidths = [1, 2, 3, 4, 5];\n  const [borderWidth, setBorderWidth] = React.useState(borderWidths[0]);\n  const borderValue = theme.borders[borderWidth] || borderWidth;\n  const borderColorValue = theme.colors[borderColor] || borderColor;\n\n  return (\n    <>\n      <Flex align="center" mb="5x">\n        <TextLabel>border =</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {borderWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setBorderWidth(width)}\n              variant={width === borderWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Grid\n          templateColumns="1fr 1fr 1fr"\n          columnGap="6x"\n          rowGap="6x"\n        >\n          <Box />\n          <Block\n            borderTop={borderWidth}\n            borderTopColor={borderColor}\n          >\n            <Text>borderTop="{borderValue}"</Text>\n            <Text>borderTopColor="{borderColorValue}"</Text>\n          </Block>\n          <Box />\n          <Block\n            borderLeft={borderWidth}\n            borderLeftColor={borderColor}\n          >\n            <Text>borderLeft="{borderValue}"</Text>\n            <Text>borderLeftColor="{borderColorValue}"</Text>\n          </Block>\n          <Block\n            border={borderWidth}\n            borderColor={borderColor}\n          >\n            <Text>border="{borderValue}"</Text>\n            <Text>borderColor="{borderColorValue}"</Text>\n          </Block>\n          <Block\n            borderRight={borderWidth}\n            borderRightColor={borderColor}\n          >\n            <Text>borderRight="{borderValue}"</Text>\n            <Text>borderRightColor="{borderColorValue}"</Text>\n          </Block>\n          <Box />\n          <Block\n            borderBottom={borderWidth}\n            borderBottomColor={borderColor}\n          >\n            <Text>borderBottom="{borderValue}"</Text>\n            <Text>borderBottomColor="{borderColorValue}"</Text>\n          </Block>\n          <Box />\n        </Grid>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,n.kt)("h3",null,"Keyword"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"thin"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"medium"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"thick")," are keywords that indicate the border width. You can use them in the ",(0,n.kt)("inlineCode",{parentName:"p"},"border")," property, but you have to set the ",(0,n.kt)("inlineCode",{parentName:"p"},"borderStyle")," property to ",(0,n.kt)("inlineCode",{parentName:"p"},"solid")," as well."),(0,n.kt)("p",null,"Note: Because the specification doesn't define the exact thickness denoted by each keyword, the precise result when using one of them is implementation-specific. Nevertheless, they always follow the pattern ",(0,n.kt)("inlineCode",{parentName:"p"},"thin ≤ medium ≤ thick"),", and the values are constant within a single document."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"noInline",noInline:!0},'const Block = (props) => {\n  const [colorMode] = useColorMode();\n  const backgroundColor = {\n    dark: \'gray:90\',\n    light: \'gray:10\',\n  }[colorMode];\n  return (\n    <Flex\n      px="4x"\n      py="3x"\n      alignItems="flex-start"\n      justifyContent="center"\n      flexDirection="column"\n      backgroundColor={backgroundColor}\n      {...props}\n    />\n  );\n};\n\nfunction Example() {\n  const theme = useTheme();\n  const borderColor = \'gray:50\';\n  const borderStyle = \'solid\';\n  const borderWidths = [\'thin\', \'medium\', \'thick\'];\n  const [borderWidth, setBorderWidth] = React.useState(borderWidths[0]);\n  const borderValue = theme.borders[borderWidth] || borderWidth;\n  const borderColorValue = theme.colors[borderColor] || borderColor;\n\n  return (\n    <>\n      <Flex align="center" mb="5x">\n        <TextLabel>border =</TextLabel>\n        <Space width="2x" />\n        <Stack direction="row" spacing="2x">\n          {borderWidths.map((width) => (\n            <Button\n              key={width}\n              onClick={() => setBorderWidth(width)}\n              variant={width === borderWidth ? \'primary\' : \'secondary\'}\n            >\n              <Text fontFamily="mono">{width}</Text>\n            </Button>\n          ))}\n        </Stack>\n      </Flex>\n      <Flex>\n        <Grid\n          templateColumns="1fr 1fr 1fr"\n          columnGap="6x"\n          rowGap="6x"\n        >\n          <Box />\n          <Block\n            borderTop={borderWidth}\n            borderTopColor={borderColor}\n            borderTopStyle={borderStyle}\n          >\n            <Text>borderTop="{borderValue}"</Text>\n            <Text>borderTopColor="{borderColorValue}"</Text>\n            <Text>borderTopStyle="{borderStyle}"</Text>\n          </Block>\n          <Box />\n          <Block\n            borderLeft={borderWidth}\n            borderLeftColor={borderColor}\n            borderLeftStyle={borderStyle}\n          >\n            <Text>borderLeft="{borderValue}"</Text>\n            <Text>borderLeftColor="{borderColorValue}"</Text>\n            <Text>borderLeftStyle="{borderStyle}"</Text>\n          </Block>\n          <Block\n            border={borderWidth}\n            borderColor={borderColor}\n            borderStyle={borderStyle}\n          >\n            <Text>border="{borderValue}"</Text>\n            <Text>borderColor="{borderColorValue}"</Text>\n            <Text>borderStyle="{borderStyle}"</Text>\n          </Block>\n          <Block\n            borderRight={borderWidth}\n            borderRightColor={borderColor}\n            borderRightStyle={borderStyle}\n          >\n            <Text>borderRight="{borderValue}"</Text>\n            <Text>borderRightColor="{borderColorValue}"</Text>\n            <Text>borderRightStyle="{borderStyle}"</Text>\n          </Block>\n          <Box />\n          <Block\n            borderBottom={borderWidth}\n            borderBottomColor={borderColor}\n            borderBottomStyle={borderStyle}\n          >\n            <Text>borderBottom="{borderValue}"</Text>\n            <Text>borderBottomColor="{borderColorValue}"</Text>\n            <Text>borderBottomStyle="{borderStyle}"</Text>\n          </Block>\n          <Box />\n        </Grid>\n      </Flex>\n    </>\n  );\n}\n\nrender(<Example />);\n')),(0,n.kt)("h2",null,"Border Radius"),(0,n.kt)(t.Z,{theme:"radii",mdxType:"ThemeParser"}),(0,n.kt)("h3",null,(0,n.kt)("inlineCode",{parentName:"h3"},'borderRadius="circle"')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="circle"\n  width="18x"\n  height="18x"\n/>\n')),(0,n.kt)("h3",null,(0,n.kt)("inlineCode",{parentName:"h3"},'borderRadius="sm"')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="sm"\n  width="18x"\n  height="18x"\n/>\n')),(0,n.kt)("h3",null,(0,n.kt)("inlineCode",{parentName:"h3"},'borderRadius="md"')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="md"\n  width="18x"\n  height="18x"\n/>\n')),(0,n.kt)("h3",null,(0,n.kt)("inlineCode",{parentName:"h3"},'borderRadius="lg"')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<Box\n  backgroundColor="gray:80"\n  border={1}\n  borderColor="gray:40"\n  borderRadius="lg"\n  width="18x"\n  height="18x"\n/>\n')),(0,n.kt)("h2",null,"Borders vs. outlines"),(0,n.kt)("p",null,"Borders and ",(0,n.kt)("a",{parentName:"p",href:"./outlines"},"outlines")," are very similar. However, outlines differ from borders in the following ways:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Outlines never take up space, as they are drawn outside of an element's content."),(0,n.kt)("li",{parentName:"ul"},"According to the spec, outlines don't have to be rectangular, although they usually are.")))}MDXContent.isMDXComponent=!0},90925:function(e,r,o){"use strict";var n=o(58693),t=o(2784),l=o(2981),d=o(62112);function _slicedToArray(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var o,n,t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var l=[],d=!0,a=!1;try{for(t=t.call(e);!(d=(o=t.next()).done)&&(l.push(o.value),!r||l.length!==r);d=!0);}catch(e){a=!0,n=e}finally{try{d||null==t.return||t.return()}finally{if(a)throw n}}return l}}(e,r)||function(e,r){if(e){if("string"==typeof e)return _arrayLikeToArray(e,r);var o=Object.prototype.toString.call(e).slice(8,-1);if("Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o)return Array.from(e);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return _arrayLikeToArray(e,r)}}(e,r)||function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var o=0,n=Array(r);o<r;o++)n[o]=e[o];return n}r.Z=function(e){var r,o=e.theme,a=(0,n.useTheme)(),i=_slicedToArray((0,n.useColorMode)(),1)[0],s=null!==(r=_slicedToArray((0,n.useColorStyle)({colorMode:i}),1)[0][o])&&void 0!==r?r:a[o];return s?(("space"===o||"sizes"===o)&&(s=Object.keys(s).filter(function(e){return!e.toString().match(/[qh]$/)}).reduce(function(e,r){return e[r]=s[r],e},{})),t.createElement(n.Box,{mb:"6x"},t.createElement(l.Z,null,"export const ".concat(o," = ").concat((0,d.Z)(s,!1))))):"Theme field not found"}},62112:function(e,r){"use strict";r.Z=function(e){return JSON.stringify(e,null,2).replace(/"/g,"'").replace(/'(\d+|[a-z]+)':/g,"$1:")}},27723:function(e,r,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/borders",function(){return o(18955)}])}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=27723)}),_N_E=e.O()}]);